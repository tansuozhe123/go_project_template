// Code generated by MockGen. DO NOT EDIT.
// Source: go_project/internal/service (interfaces: ProductServiceInf)

// Package mocks is a generated GoMock package.
package mocks

import (
	dto "go_project/api/v1/web/dto"
	commonres "go_project/pkg/commonres"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductServiceInf is a mock of ProductServiceInf interface.
type MockProductServiceInf struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceInfMockRecorder
}

// MockProductServiceInfMockRecorder is the mock recorder for MockProductServiceInf.
type MockProductServiceInfMockRecorder struct {
	mock *MockProductServiceInf
}

// NewMockProductServiceInf creates a new mock instance.
func NewMockProductServiceInf(ctrl *gomock.Controller) *MockProductServiceInf {
	mock := &MockProductServiceInf{ctrl: ctrl}
	mock.recorder = &MockProductServiceInfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductServiceInf) EXPECT() *MockProductServiceInfMockRecorder {
	return m.recorder
}

// GetOneProduct mocks base method.
func (m *MockProductServiceInf) GetOneProduct(arg0 dto.GetOneProductReq) *commonres.CommonRes {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneProduct", arg0)
	ret0, _ := ret[0].(*commonres.CommonRes)
	return ret0
}

// GetOneProduct indicates an expected call of GetOneProduct.
func (mr *MockProductServiceInfMockRecorder) GetOneProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneProduct", reflect.TypeOf((*MockProductServiceInf)(nil).GetOneProduct), arg0)
}
