// Code generated by MockGen. DO NOT EDIT.
// Source: go_project/internal/biz/repository (interfaces: ProductRepoInf)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "go_project/internal/biz/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductRepoInf is a mock of ProductRepoInf interface.
type MockProductRepoInf struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepoInfMockRecorder
}

// MockProductRepoInfMockRecorder is the mock recorder for MockProductRepoInf.
type MockProductRepoInfMockRecorder struct {
	mock *MockProductRepoInf
}

// NewMockProductRepoInf creates a new mock instance.
func NewMockProductRepoInf(ctrl *gomock.Controller) *MockProductRepoInf {
	mock := &MockProductRepoInf{ctrl: ctrl}
	mock.recorder = &MockProductRepoInfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepoInf) EXPECT() *MockProductRepoInfMockRecorder {
	return m.recorder
}

// GetOneProduct mocks base method.
func (m *MockProductRepoInf) GetOneProduct(arg0 string) (*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneProduct", arg0)
	ret0, _ := ret[0].(*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneProduct indicates an expected call of GetOneProduct.
func (mr *MockProductRepoInfMockRecorder) GetOneProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneProduct", reflect.TypeOf((*MockProductRepoInf)(nil).GetOneProduct), arg0)
}
